"""Module for converting coastal points data to BallTree structures."""

import logging
from multiprocessing import Pool, cpu_count
from pathlib import Path

import joblib
import numpy as np
import pandas as pd
import pandera as pa
from numpy.typing import NDArray
from pandera.typing import DataFrame, Series
from sklearn.neighbors import BallTree

from utils.log_utils import configure_logging

# Configure logging
logger = logging.getLogger(__name__)

# Define input and output directories relative to script location
ROOT_DIR = Path(__file__).resolve().parent.parent
input_dir: Path = ROOT_DIR / "data" / "coastal_data_points"
output_dir: Path = ROOT_DIR / "data" / "ball_trees"

# Create output directory if it doesn't exist
output_dir.mkdir(parents=True, exist_ok=True)


# Define Pandera schema for coastal points DataFrame
class CoastalPointsSchema(pa.SchemaModel):
    """Schema for coastal points DataFrame validation."""

    longitude: Series[float] = pa.Field(
        ge=-180.0,
        le=180.0,
        nullable=False,
        description="Longitude of coastal point",
    )
    latitude: Series[float] = pa.Field(
        ge=-90.0,
        le=90.0,
        nullable=False,
        description="Latitude of coastal point",
    )

    class Config:
        """Pandera schema configuration."""

        strict = True
        coerce = True


@pa.check_types
def create_and_save_ball_tree(file_path: str) -> None:
    """
    Read a coastal_points.csv file, create a BallTree, and save it.

    Note that the required csvs must be generated by src/extract_coastal_points.py
    These are not provided in this repostiory.

    Args:
        file_path: Path to the input CSV file containing coastal points

    Raises:
        pa.errors.SchemaError: If the data doesn't match the schema
    """
    try:
        # Load and validate the coastal data
        data: DataFrame[CoastalPointsSchema] = pd.read_csv(
            file_path, header=None, names=["longitude", "latitude"]
        )

        # Convert data to radians
        coastal_data_rad: NDArray[np.float64] = np.radians(
            data[["latitude", "longitude"]].values
        )

        # Create BallTree
        tree: BallTree = BallTree(coastal_data_rad, metric="haversine")

        # Define output path
        base_name = Path(file_path).stem
        output_path = output_dir / f"{base_name}_ball_tree.joblib"

        # Save the BallTree using joblib
        joblib.dump(tree, str(output_path), compress=0, protocol=5)
        logger.info("Saved BallTree for %s at %s", file_path, output_path)

    except pa.errors.SchemaError as e:
        logger.error("Data validation error in %s: %s", file_path, e)
    except Exception as e:
        logger.error("Error processing %s: %s", file_path, e)


def process_directory_in_parallel() -> None:
    """Find all coastal_points.csv files and process them in parallel."""
    # List all CSV files in the input directory
    csv_files: list[str] = [str(f) for f in input_dir.glob("*_coastal_points.csv")]

    logger.info("Found %d coastal points files to process", len(csv_files))

    # Use all available cores for parallel processing
    with Pool(cpu_count()) as pool:
        pool.map(create_and_save_ball_tree, csv_files)

    logger.info("Completed processing all files")


if __name__ == "__main__":
    # Configure logging for command line usage
    configure_logging()
    process_directory_in_parallel()
